# vim: set filetype=sh :


say() {
    local line
    echo
    for line; do
    echo "$line"
    done
    echo
}


warn() {
    echo "Warning: $*"
}


die() {
    local es opt

    es=1

    while getopts "e:" opt; do
        case $opt in
            e)
                es=$OPTARG
                ;;
            \?)
                echo "die}(): Invalid option: -$OPTARG" 1>&2
                return $OPTERR
                ;;
        esac
    done
    shift `expr $OPTIND - 1`

    echo "Fatal error: $*"
    read -p "Press enter key to exit." REPLY
    exit $es
}


# Handles -options for *-install programs.
# Each handled arg is set to a matching variable.
# Shift by $? to clip these from your $*.
#
set_install_parameters() {
    local optind

    while true; do
        case "$1" in
            -nopartition)
                nopartition=true
                ;;
            -noformat)
                noformat=true
                ;;
            -*)
                warn "set_install_args(): unknown option: '$1'."
                ;;
            *)
                # found first non-option. Leave rest to the caller.
                break
                ;;
        esac
        optind=$(($optind + 1))
        shift
    done
    return ${optind:-0}
}


create_boot_partition() {
    local disk part start end label n
    disk="$1"
    part="$2"
    start="$3"
    end="$4"
    label="$5"
    n="$(get_part_number "$part")"

    [ -b "$disk" ] || die "${disk}: not a block special."

    say "Creating new boot partition on ${disk}"
    parted -s "$disk"  mkpart primary fat32 "$start" "$end"
    [ -n "$label" ] && parted -s "$disk"  name "$n" "$label"
    parted -s "$disk"  set "$n" boot on
    sync
}


format_boot_partition() {
    mkfs.vfat -v "$1"
}


create_recovery_partition() {
    local disk part start end label n
    disk="$1"
    part="$2"
    start="$3"
    end="$4"
    label="$5"
    n="$(get_part_number "$part")"

    [ -b "$disk" ] || die "${disk}: not a block special."

    say "Creating new recovery partition on ${disk}."
    parted -s "$disk"  mkpart primary ext2 "$start" "$end"
    [ -n "$label" ] && parted -s "$disk"  name "$n" "$label"
    parted -s "$disk"  set 2 diag on
    sync
}


format_recovery_partition() {
    mkfs.ext2 -F "$1"
}


create_root_partition() {
    local disk part start end label n
    disk="$1"
    part="$2"
    start="$3"
    end="$4"
    label="$5"
    n="$(get_part_number "$part")"

    [ -b "$disk" ] || die "${disk}: not a block special."

    say "Creating new / partition on ${disk}."
    parted -s "$disk"  mkpart primary ext4 "$start" "$end"
    [ -n "$label" ] && parted -s "$disk"  name "$n" "$label"
    sync
}


format_root_partition() {
    mkfs.ext4 "$1"
}


ls_devices() {
    echo
    echo "Available devices: "
    echo
    ls /dev/sd? /dev/hd? 2>/dev/null
    echo
}


ls_partitions() {
    if [ -n "$1" ]; then
        say "Displaying partition table of ${1}"
        parted "$1" print
    else
        say "Displaying all partition tables."
        parted -s --list
    fi
}

get_memory() {
    free "$*" | grep Mem: | awk '{print $2}'
}


get_part_number() {
    echo "$1" | sed -e "s%/dev/[^0-9]*%%"
}


get_uuid() { # Busybox blkid doesn't have fancy things so use sed for formatting.
    blkid "$1" | sed -e 's/.*\s\(UUID="[-a-zA-Z0-9]*"\)\s.*/\1/g' -e 's/"//g'
}


do_mount() {
    local m
    m="${2:-/mnt}"

    if ! mount "$1" $m; then
        die "Failed mounting ${3:-$1} device on ${m}."
    fi
}


do_umount() {
    local m
    m="${2:-/mnt}"
    if ! umount $m; then
        die "Failed unmounting ${3:-$1} device from ${m}."
    fi
}


install_image() {
    local device image where

    device="$1"
    image="$2"
    where="${3:-/mnt}"

    say "Installing image $image onto $device mounted at ${where}."

    do_mount "$device" "$where" "$image"

    # echo "TODO: untar $image image"
    #     echo "Pausing so you can extract system files on ${where}."
    #     read -p "Press enter to continue." REPLY

    # make sure we use busybox tar because of ownership errors extracting to FAT.
    busybox tar -C "$where" -xJf "$image"

    do_umount "$device" "$where" "$image"
}


install_mbr() {
    case "$1" in
        gptmbr)
            say "Writing GPT protective MBR with UEFI-CSM support."
            ;;
        mbr)
            say "Writing MS-DOS style legacy Master Boot Record."
            ;;
        *)
            say "Writing MBR from syslinux ${1}.bin"
            ;;
    esac
    dd bs=440 count=1 conv=notrunc "if=/syslinux/bios/mbr/${1}.bin" "of=${2}"

    # Make sure that the writes are synced to prevent a race condition.
    #
    # It seems that the device files for the partitions can disappear briefly
    # after writing an MBR. As luck would have it we can end up trying to use
    # those before the partition shows up in /dev again!
    #
    sync
}


install_efiboot() {
    local device arch where dir

    device="$1"
    arch="$2"
    where="${3:-/mnt}"


    say "Installing syslinux UEFI boot software"

    do_mount "$device" "$where" ESP
    dir="${where}/EFI/BOOT"
    mkdir -p "$dir"
    case "$arch" in
        x86_64)
            cp -v /syslinux/efi64/efi/syslinux.efi "${dir}/BOOTX64.EFI"
            cp -v /syslinux/efi64/com32/elflink/ldlinux/ldlinux.e64 "${dir}/"
            ;;
        i*86)
            cp -v /syslinux/efi32/efi/syslinux.efi "${dir}/BOOTIA32.EFI"
            cp -v /syslinux/efi32/com32/elflink/ldlinux/ldlinux.e32 "${dir}/"
            ;;
        *)
            echo "unsupported architecture: $2"
            ;;
    esac
    do_umount "$device" "$where" ESP
}


write_syslinux_cfg() {
    local root recovery file kernel

    root="$1"
    recovery="$2"
    file="$3"
    kernel="${4:-/vmlinuz}"
    cat << EOF > "$file"
LABEL TOS
    LINUX $kernel
    APPEND rootwait root=${root} rw quiet
LABEL RECOVERY
    LINUX /vmlinuz
    APPEND rootwait root=${recovery} rw quiet

SAY TOS      = The Other System from ${root}.
SAY RECOVERY = Reinstall from recovery partition from ${recovery}.
DEFAULT TOS
PROMPT 1
TIMEOUT 50
EOF
}

